# your_api_file.py

from fastapi import APIRouter, status, Request
from fastapi.responses import JSONResponse
from dataclasses import asdict

from src.schema import AnswerResponse, QuestionRequest
from src.utils.agents.orchestrator_agent import orchestrator
from src.utils.session_layer import get_or_create_session, update_session, find_session_id_by_thread_id

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse, status_code=status.HTTP_200_OK)
async def review(request: QuestionRequest, req: Request):
    session_id, thread_id = get_or_create_session(req)
    print("Thread ID being used:", thread_id)

    agent = await orchestrator.create()
    result = await agent.process_message(request.message, thread_id)

    update_session(session_id, result.thread_id)





# 1. Create in-memory backend with TTL
backend = InMemoryBackend[UUID, SessionData]()
backend.expire_after = timedelta(hours=1)

# 2. Cookie frontend for session ID tracking
cookie_params = CookieParameters(
    name="session_id",
    path="/",
    secure=False,    # set to True if using HTTPS
    httponly=True,
    samesite="lax",
)

cookie = SessionCookie(
    cookie_params=cookie_params,
    secret_key="super-secret-key",  # replace with an environment variable in production
    identifier=lambda: uuid4(),     # callable that generates UUID session IDs
    auto_error=False,
)

# 3. SessionVerifier subclass with correct super() signature
class BasicSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier=cookie.identifier,
            backend=backend,
            auto_error=False
        )

    def verify_session(self, session_data: SessionData) -> bool:
        # You can add validation logic here, like expiration
        return True

verifier = BasicSessionVerifier()

    # src/utils/session_layer.py

import uuid
from fastapi import Request

# In-memory session store. You can replace this with Redis or DB later.
session_store = {}

def get_or_create_session(request: Request):
    session_id = request.cookies.get("session_id")

    if session_id is None or session_id not in session_store:
        session_id = str(uuid.uuid4())
        thread_id = None
        session_store[session_id] = {"thread_id": thread_id}
    else:
        thread_id = session_store[session_id]["thread_id"]
        print("Existing thread ID found:", thread_id)

    return session_id, thread_id

def update_session(session_id: str, thread_id: str):
    session_store[session_id] = {"thread_id": thread_id}

def find_session_id_by_thread_id(thread_id: str) -> str | None:
    for key, value in session_store.items():
        if value["thread_id"] == thread_id:
            return key
    return None

    response = JSONResponse(content=asdict(result))
    response.set_cookie(key="session_id", value=session_id, httponly=False, secure=False)

    if not req.cookies.get("session_id"):
        matched_session = find_session_id_by_thread_id(result.thread_id)
        if matched_session:
            response.set_cookie(key="session_id", value=matched_session, httponly=False, secure=False)

    return response

# src/session_model.py
from pydantic import BaseModel
from typing import Optional

class SessionData(BaseModel):
    thread_id: Optional[str] = None


# src/session_backend.py
from uuid import UUID, uuid4
from datetime import timedelta
from fastapi_sessions.backends.in_memory import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie
from fastapi_sessions.session_verifier import SessionVerifier

from src.session_model import SessionData

# In-memory session backend
backend = InMemoryBackend[UUID, SessionData](expire_after=timedelta(hours=1))

# Cookie-based session frontend
cookie = SessionCookie(
    cookie_name="session_id",
    identifier=lambda: uuid4(),
    auto_error=False
)

# Session verifier class
class BasicSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(identifier=lambda: uuid4(), auto_error=False)

    async def verify_session(self, session_data: SessionData) -> bool:
        return True  # Always trust session if found

verifier = BasicSessionVerifier()






# your_api_file.py
from uuid import UUID
from fastapi import APIRouter, Depends
from fastapi.responses import JSONResponse
from dataclasses import asdict

from src.schema import AnswerResponse, QuestionRequest
from src.utils.agents.orchestrator_agent import orchestrator
from src.session_model import SessionData
from src.session_backend import backend, cookie, verifier

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse)
async def review(
    request: QuestionRequest,
    session_id: UUID = Depends(cookie),
    session_data: SessionData = Depends(verifier)
):
    # First-time visitor: create session manually
    if session_id not in backend.sessions:
        session_data = SessionData(thread_id=None)
        await backend.create(session_id, session_data)

    # Use thread_id from session
    thread_id = session_data.thread_id

    agent = await orchestrator.create()
    result = await agent.process_message(request.message, thread_id)

    # Update session data
    session_data.thread_id = result.thread_id
    await backend.update(session_id, session_data)

    return JSONResponse(content=asdict(result))


# 1. Create in-memory backend with TTL
backend = InMemoryBackend[UUID, SessionData]()
backend.expire_after = timedelta(hours=1)

# 2. Cookie frontend for session ID tracking
cookie_params = CookieParameters(
    name="session_id",
    path="/",
    secure=False,    # set to True if using HTTPS
    httponly=True,
    samesite="lax",
)

cookie = SessionCookie(
    cookie_params=cookie_params,
    secret_key="super-secret-key",  # replace with an environment variable in production
    identifier=lambda: uuid4(),     # callable that generates UUID session IDs
    auto_error=False,
)

# 3. SessionVerifier subclass with correct super() signature
class BasicSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier=cookie.identifier,
            backend=backend,
            auto_error=False
        )

    def verify_session(self, session_data: SessionData) -> bool:
        # You can add validation logic here, like expiration
        return True

verifier = BasicSessionVerifier()









from uuid import UUID, uuid4
from datetime import timedelta
from fastapi_sessions.backends.in_memory import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie
from fastapi_sessions.session_verifier import SessionVerifier

from src.session_model import SessionData

# In-memory session backend
backend = InMemoryBackend[UUID, SessionData](expire_after=timedelta(hours=1))

# Cookie-based session frontend
cookie = SessionCookie(
    cookie_name="session_id",
    identifier=lambda: uuid4(),
    auto_error=False
)

# ✅ Fixed: Session verifier class
class BasicSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier=lambda: uuid4(),
            backend=backend,              # ✅ Required argument
            auto_error=False
        )

    async def verify_session(self, session_data: SessionData) -> bool:
        return True  # ✅ Always trust session (or add logic here)

# Verifier instance
verifier = BasicSessionVerifier()




from uuid import UUID, uuid4
from datetime import timedelta
from fastapi_sessions.backends.in_memory import InMemoryBackend, InMemoryVerifier
from fastapi_sessions.frontends.implementations import SessionCookie

from src.session_model import SessionData

# In-memory session backend
backend = InMemoryBackend[UUID, SessionData](expire_after=timedelta(hours=1))

# Cookie frontend
cookie = SessionCookie(
    cookie_name="session_id",
    identifier=lambda: uuid4(),
    auto_error=False
)

# ✅ Use the correct verifier for in-memory backend
class BasicSessionVerifier(InMemoryVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier=lambda: uuid4(),
            backend=backend,
            auto_error=False,
        )

    async def verify_session(self, session_data: SessionData) -> bool:
        return True

# Verifier instance
verifier = BasicSessionVerifier()
\

@router.post("/ask", response_model=AnswerResponse)
async def review(
    request: QuestionRequest,
    session_id: UUID = Depends(cookie),
    session_data: SessionData = Depends(verifier)
):
    if session_id not in backend.sessions:
        session_data = SessionData(thread_id=None)
        await backend.create(session_id, session_data)

    thread_id = session_data.thread_id
    agent = await orchestrator.create()
    result = await agent.process_message(request.message, thread_id)

    session_data.thread_id = result.thread_id
    await backend.update(session_id, session_data)

    return JSONResponse(content=asdict(result))
