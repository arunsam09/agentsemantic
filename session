# src/utils/session_layer.py

from typing import Optional
from uuid import UUID
from pydantic import BaseModel
from fastapi import HTTPException
from fastapi_sessions import SessionCookie, SessionInfo
from fastapi_sessions.backends import InMemoryBackend

# ✅ 1. Define session data schema
class SessionData(BaseModel):
    thread_id: Optional[str] = None

# ✅ 2. Create cookie frontend
cookie = SessionCookie(
    name="session_id",
    secret_key="YOUR_SECRET_KEY",        # choose a strong secret
    backend=InMemoryBackend[UUID, SessionData](),
    data_model=SessionData,
    scheme_name="Session Cookie",
    auto_error=False,
)

# ✅ 3. (Optional) Verifier is built-in in this interface




from uuid import uuid4
from fastapi import APIRouter, status, Request, Response, Depends, HTTPException
from fastapi.responses import JSONResponse
from dataclasses import asdict

from src.schema import QuestionRequest, AnswerResponse
from src.utils.agents.orchestrator_agent import orchestrator
from src.utils.session_layer import cookie, SessionData, SessionInfo

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse, status_code=status.HTTP_200_OK)
async def ask(
    req: Request,
    req_body: QuestionRequest,
    response: Response,
    session_info: SessionInfo[SessionData] = Depends(cookie)
):
    # ✅ If there's no session yet, create one
    if session_info is None:
        new_session_id = uuid4()
        session_data = SessionData(thread_id=None)
        await cookie.create_session(session_data, response, old_session_id=None)
        thread_id = None
    else:
        session_id, session_data = session_info
        thread_id = session_data.thread_id
        new_session_id = session_id

    # ✅ Process message
    agent = await orchestrator.create()
    result = await agent.process_message(req_body.message, thread_id)

    # ✅ Save updated thread ID
    session_data.thread_id = result.thread_id
    await cookie.create_session(session_data, response, old_session_id=new_session_id)

    # ✅ Return response with cookie set
    resp = JSONResponse(content=asdict(result), status_code=status.HTTP_200_OK)
    cookie.attach_to_response(resp, new_session_id)
    return resp













from typing import Optional
from uuid import UUID, uuid4
from pydantic import BaseModel
from fastapi import HTTPException
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.session_verifier import SessionVerifier

# 1. Define the session data schema
class SessionData(BaseModel):
    thread_id: Optional[str] = None

# 2. Create cookie frontend
cookie_params = CookieParameters()
cookie = SessionCookie(
    cookie_name="session_id",
    identifier="general_verifier",  # connects cookie verifier pair
    secret_key="CHANGE_THIS_TO_A_SECURE_RANDOM_KEY",
    cookie_params=cookie_params,
    auto_error=False,
)

# 3. Setup backend
backend = InMemoryBackend[UUID, SessionData]()

# 4. Create a session verifier
class BasicVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier="general_verifier",
            auto_error=True,
            backend=backend,
            auth_http_exception=HTTPException(status_code=403, detail="Invalid session"),
        )

    def verify_session(self, data: SessionData) -> bool:
        # Simple pass-through validator
        return True

verifier = BasicVerifier()



from uuid import uuid4
from fastapi import APIRouter, Depends, Response, HTTPException
from fastapi.responses import JSONResponse
from dataclasses import asdict
from src.schema import QuestionRequest, AnswerResponse
from src.utils.agents.orchestrator_agent import orchestrator
from src.utils.session_layer import cookie, backend, verifier, SessionData

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse)
async def ask(
    req_body: QuestionRequest,
    response: Response,
    session_id: UUID = Depends(cookie),           # Read/Create session_id from cookie
    session_data: SessionData = Depends(verifier) # Validate and load data
):
    # Determine if it's a new session
    thread_id = session_data.thread_id

    # Process the user's question using the orchestrator agent
    agent = await orchestrator.create()
    result = await agent.process_message(req_body.message, thread_id)

    # Update session data and store it
    session_data.thread_id = result.thread_id
    await backend.create(session_id, session_data)

    # Attach updated session cookie
    cookie.attach_to_response(response, session_id)

    return JSONResponse(content=asdict(result))

@router.post("/logout")
async def logout(response: Response, session_id: UUID = Depends(cookie)):
    # Delete session from backend and clear the cookie
    await backend.delete(session_id)
    cookie.delete_from_response(response)
    return {"detail": "Logged out successfully"}




from typing import Optional
from uuid import UUID
from pydantic import BaseModel
from fastapi import HTTPException
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.session_verifier import SessionVerifier

# 1. Session schema
class SessionData(BaseModel):
    thread_id: Optional[str] = None

# 2. Cookie config
cookie_params = CookieParameters()
cookie = SessionCookie(
    cookie_name="session_id",
    secret_key="YOUR_SUPER_SECRET",
    identifier="my-session-verifier",
    cookie_params=cookie_params,
    auto_error=False,
)

# 3. Backend
backend = InMemoryBackend[UUID, SessionData]()

# 4. Verifier
class BasicVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self, identifier: str):
        self.identifier = identifier
        self.backend = backend
        self.auto_error = True
        self.auth_http_exception = HTTPException(status_code=403, detail="Invalid session")

    async def verify_session(self, model: SessionData) -> bool:
        # Optional logic (e.g., validate user role or presence)
        return True

verifier = BasicVerifier(identifier="my-session-verifier")

from typing import Optional
from uuid import UUID
from pydantic import BaseModel
from fastapi import HTTPException
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.session_verifier import SessionVerifier

# 1. Define session data schema
class SessionData(BaseModel):
    thread_id: Optional[str] = None

# 2. Cookie frontend
cookie_params = CookieParameters()
cookie = SessionCookie(
    cookie_name="session_id",
    secret_key="SUPER_SECRET_KEY",  # Use a secure key
    identifier="general_verifier",
    cookie_params=cookie_params,
    auto_error=False
)

# 3. In-memory backend
backend = InMemoryBackend[UUID, SessionData]()

# 4. Session Verifier
class BasicVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier="general_verifier",  # MUST match cookie.identifier
            backend=backend,
            auto_error=True,
            auth_http_exception=HTTPException(status_code=403, detail="Invalid session")
        )

    async def verify_session(self, session_data: SessionData) -> bool:
        # Return True to accept session
        return True

# 5. Create an instance of the verifier
verifier = BasicVerifier()


from typing import Optional
from uuid import UUID
from pydantic import BaseModel
from fastapi import HTTPException
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.session_verifier import SessionVerifier

# 1. Session data schema
class SessionData(BaseModel):
    thread_id: Optional[str] = None

# 2. Cookie frontend config
cookie_params = CookieParameters()
cookie = SessionCookie(
    cookie_name="session_id",
    identifier="general_verifier",
    secret_key="YOUR_SECRET_KEY_HERE",
    cookie_params=cookie_params,
    auto_error=True,
)

# 3. In-memory backend
backend = InMemoryBackend[UUID, SessionData]()

# 4. Session verifier as per official example
class BasicVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        self._identifier = "general_verifier"
        self._backend = backend
        self._auto_error = True
        self._auth_http_exception = HTTPException(status_code=403, detail="Invalid session")

    @property
    def identifier(self) -> str:
        return self._identifier

    @property
    def backend(self) -> InMemoryBackend[UUID, SessionData]:
        return self._backend

    @property
    def auto_error(self) -> bool:
        return self._auto_error

    @property
    def auth_http_exception(self) -> HTTPException:
        return self._auth_http_exception

    def verify_session(self, session_data: SessionData) -> bool:
        # You can add checks here if needed
        return True

verifier = BasicVerifier()




rom fastapi import APIRouter, Depends, Response, status
from fastapi.responses import JSONResponse
from uuid import UUID
from dataclasses import asdict

from src.schema import QuestionRequest, AnswerResponse
from src.utils.agents.orchestrator_agent import orchestrator
from src.utils.session_layer import cookie, verifier, backend, SessionData

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse, status_code=status.HTTP_200_OK)
async def ask(
    req_body: QuestionRequest,
    response: Response,
    session_id: UUID = Depends(cookie),
    session_data: SessionData = Depends(verifier)
):
    thread_id = session_data.thread_id

    agent = await orchestrator.create()
    result = await agent.process_message(req_body.message, thread_id)

    session_data.thread_id = result.thread_id
    await backend.create(session_id, session_data)

    cookie.attach_to_response(response, session_id)

    return JSONResponse(content=asdict(result))
