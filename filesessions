import logging
from uuid import UUID, uuid4

from fastapi import FastAPI, Request, Response, HTTPException, Depends
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.session_verifier import SessionVerifier
from pydantic import BaseModel
from typing import Dict

from app.agents.reviewer_agent import ReviewerAgent
from app.models import ReviewRequest, ReviewResponse

# -------------------------------
# Setup logging
# -------------------------------
logger = logging.getLogger("ReviewerAPI")
logging.basicConfig(level=logging.INFO)

# -------------------------------
# Initialize FastAPI app
# -------------------------------
app = FastAPI()

# -------------------------------
# Session configuration
# -------------------------------
class SessionData(BaseModel):
    thread_id: str

cookie_params = CookieParameters()

# Secret key must be kept safe
SECRET_KEY = "CHANGE_THIS_SECRET_KEY"

cookie = SessionCookie(
    cookie_name="session",
    identifier="reviewer_verifier",
    auto_error=True,
    secret_key=SECRET_KEY,
    cookie_params=cookie_params,
)

# In-memory backend to store session data
backend = InMemoryBackend[UUID, SessionData]()

class ReviewerSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(self):
        super().__init__(
            identifier="reviewer_verifier",
            auto_error=True,
            backend=backend,
            auth_http_exception=HTTPException(status_code=403, detail="Invalid session"),
        )

    def verify_session(self, data: SessionData) -> bool:
        return True  # You can add extra validation here

verifier = ReviewerSessionVerifier()

# -------------------------------
# In-memory store for agents
# -------------------------------
agent_sessions: Dict[UUID, ReviewerAgent] = {}

# -------------------------------
# Create a session
# -------------------------------
@app.post("/create_session/{thread_id}")
async def create_session(thread_id: str, response: Response):
    session_id = uuid4()
    session_data = SessionData(thread_id=thread_id)

    await backend.create(session_id, session_data)
    cookie.attach_to_response(response, session_id)

    # Initialize ReviewerAgent for this session
    agent = await ReviewerAgent.create()
    agent_sessions[session_id] = agent

    logger.info(f"Session {session_id} created for thread {thread_id}")
    return {"message": f"Session created with thread ID {thread_id}"}

# -------------------------------
# Use the session in /review
# -------------------------------
@app.post("/review", response_model=ReviewResponse, dependencies=[Depends(cookie)])
async def review(
    request_data: ReviewRequest,
    session_data: SessionData = Depends(verifier),
    session_id: UUID = Depends(cookie),
):
    agent = agent_sessions.get(session_id)

    if not agent:
        # Agent may have been lost; recreate
        logger.warning(f"No agent found for session {session_id}, creating new one.")
        agent = await ReviewerAgent.create()
        agent_sessions[session_id] = agent

    try:
        result = await agent.process_message(request_data.message, session_data.thread_id)
        return result
    except Exception as e:
        logger.error(f"Error during review: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

# -------------------------------
# Delete the session (logout)
# -------------------------------
@app.post("/delete_session")
async def delete_session(response: Response, session_id: UUID = Depends(cookie)):
    await backend.delete(session_id)
    agent_sessions.pop(session_id, None)
    cookie.delete_from_response(response)

    logger.info(f"Session {session_id} deleted")
    return {"message": "Session deleted successfully"}


import logging
from uuid import UUID, uuid4
from typing import Dict

from fastapi import FastAPI, Request, Response, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.session_verifier import SessionVerifier
from pydantic import BaseModel

from app.agents.reviewer_agent import ReviewerAgent
from app.models import ReviewRequest, ReviewResponse

# -------------------------------
# Logging setup
# -------------------------------
logger = logging.getLogger("ReviewerAPI")
logging.basicConfig(level=logging.INFO)

# -------------------------------
# FastAPI initialization
# -------------------------------
app = FastAPI()

# Optional: Add CORS if using with frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Update this as needed
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------
# Session configuration
# -------------------------------
class SessionData(BaseModel):
    thread_id: str

cookie_params = CookieParameters()

SECRET_KEY = "REPLACE_WITH_YOUR_SECRET_KEY"

cookie = SessionCookie(
    cookie_name="session",
    identifier="reviewer_verifier",
    auto_error=True,
    secret_key=SECRET_KEY,
    cookie_params=cookie_params,
)

backend = InMemoryBackend[UUID, SessionData]()


class ReviewerSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(
        self,
        *,
        identifier: str,
        auto_error: bool,
        backend: InMemoryBackend[UUID, SessionData],
        auth_http_exception: HTTPException,
    ):
        self._identifier = identifier
        self._auto_error = auto_error
        self._backend = backend
        self._auth_http_exception = auth_http_exception

    @property
    def identifier(self) -> str:
        return self._identifier

    @property
    def backend(self) -> InMemoryBackend[UUID, SessionData]:
        return self._backend

    @property
    def auto_error(self) -> bool:
        return self._auto_error

    @property
    def auth_http_exception(self) -> HTTPException:
        return self._auth_http_exception

    def verify_session(self, model: SessionData) -> bool:
        return True


verifier = ReviewerSessionVerifier(
    identifier="reviewer_verifier",
    auto_error=True,
    backend=backend,
    auth_http_exception=HTTPException(status_code=403, detail="Invalid session"),
)

# -------------------------------
# In-memory store for agents
# -------------------------------
agent_sessions: Dict[UUID, ReviewerAgent] = {}

# -------------------------------
# Endpoints
# -------------------------------

@app.post("/create_session/{thread_id}")
async def create_session(thread_id: str, response: Response):
    session_id = uuid4()
    session_data = SessionData(thread_id=thread_id)

    await backend.create(session_id, session_data)
    cookie.attach_to_response(response, session_id)

    agent = await ReviewerAgent.create()
    agent_sessions[session_id] = agent

    logger.info(f"Session created with ID: {session_id} for thread {thread_id}")
    return {"message": f"Session created for thread '{thread_id}'"}


@app.post("/review", response_model=ReviewResponse, dependencies=[Depends(cookie)])
async def review(
    request_data: ReviewRequest,
    session_data: SessionData = Depends(verifier),
    session_id: UUID = Depends(cookie),
):
    agent = agent_sessions.get(session_id)

    if not agent:
        logger.warning(f"No agent found for session {session_id}, creating new one.")
        agent = await ReviewerAgent.create()
        agent_sessions[session_id] = agent

    try:
        result = await agent.process_message(request_data.message, session_data.thread_id)
        return result
    except Exception as e:
        logger.error(f"Review processing error: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")


@app.post("/delete_session")
async def delete_session(response: Response, session_id: UUID = Depends(cookie)):
    await backend.delete(session_id)
    agent_sessions.pop(session_id, None)
    cookie.delete_from_response(response)

    logger.info(f"Session {session_id} deleted")
    return {"message": "Session deleted successfully"}



import logging
from uuid import UUID, uuid4
from typing import Dict

from fastapi import FastAPI, Request, Response, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi_sessions.backends.implementations import InMemoryBackend
from fastapi_sessions.frontends.implementations import SessionCookie, CookieParameters
from fastapi_sessions.session_verifier import SessionVerifier
from pydantic import BaseModel
from datetime import timedelta

from app.agents.reviewer_agent import ReviewerAgent
from app.models import ReviewRequest, ReviewResponse

# -------------------------------
# Logging setup
# -------------------------------
logger = logging.getLogger("ReviewerAPI")
logging.basicConfig(level=logging.INFO)

# -------------------------------
# FastAPI App Setup
# -------------------------------
app = FastAPI()

# Enable CORS for frontend testing
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Adjust as needed
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------
# Session Setup
# -------------------------------
class SessionData(BaseModel):
    thread_id: str

SECRET_KEY = "super-secret-key"  # Replace with a real secret key
cookie_params = CookieParameters()

cookie = SessionCookie(
    cookie_name="session",
    identifier="reviewer_verifier",
    auto_error=True,
    secret_key=SECRET_KEY,
    cookie_params=cookie_params,
    lifetime=timedelta(hours=2)  # Session lasts 2 hours
)

backend = InMemoryBackend[UUID, SessionData]()


class ReviewerSessionVerifier(SessionVerifier[UUID, SessionData]):
    def __init__(
        self,
        *,
        identifier: str,
        auto_error: bool,
        backend: InMemoryBackend[UUID, SessionData],
        auth_http_exception: HTTPException,
    ):
        self._identifier = identifier
        self._auto_error = auto_error
        self._backend = backend
        self._auth_http_exception = auth_http_exception

    @property
    def identifier(self) -> str:
        return self._identifier

    @property
    def backend(self) -> InMemoryBackend[UUID, SessionData]:
        return self._backend

    @property
    def auto_error(self) -> bool:
        return self._auto_error

    @property
    def auth_http_exception(self) -> HTTPException:
        return self._auth_http_exception

    def verify_session(self, model: SessionData) -> bool:
        return True


verifier = ReviewerSessionVerifier(
    identifier="reviewer_verifier",
    auto_error=True,
    backend=backend,
    auth_http_exception=HTTPException(status_code=403, detail="Invalid session"),
)

# -------------------------------
# In-Memory Store for ReviewerAgents
# -------------------------------
agent_sessions: Dict[UUID, ReviewerAgent] = {}

# -------------------------------
# API Endpoints
# -------------------------------

@app.post("/create_session/{thread_id}")
async def create_session(thread_id: str, response: Response):
    session_id = uuid4()
    session_data = SessionData(thread_id=thread_id)

    await backend.create(session_id, session_data)
    cookie.attach_to_response(response, session_id)

    agent = await ReviewerAgent.create()
    agent_sessions[session_id] = agent

    logger.info(f"Session created: {session_id} for thread: {thread_id}")
    return {"message": "Session created", "thread_id": thread_id}


@app.post("/review", response_model=ReviewResponse, dependencies=[Depends(cookie)])
async def review(
    request_data: ReviewRequest,
    session_data: SessionData = Depends(verifier),
    session_id: UUID = Depends(cookie),
):
    agent = agent_sessions.get(session_id)

    if not agent:
        logger.warning(f"No agent found for session {session_id}, recreating.")
        agent = await ReviewerAgent.create()
        agent_sessions[session_id] = agent

    try:
        result = await agent.process_message(request_data.message, session_data.thread_id)
        return result
    except Exception as e:
        if str(e).lower() == "chat is complete":
            logger.info(f"Session {session_id} - chat is complete for thread {session_data.thread_id}")
            raise HTTPException(status_code=400, detail="Chat is complete. Please start a new session.")
        logger.error(f"Review processing failed: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")


@app.post("/delete_session")
async def delete_session(response: Response, session_id: UUID = Depends(cookie)):
    await backend.delete(session_id)
    agent_sessions.pop(session_id, None)
    cookie.delete_from_response(response)

    logger.info(f"Session deleted: {session_id}")
    return {"message": "Session deleted"}

from fastapi import APIRouter, Request, status, Depends
from fastapi.responses import JSONResponse
from app.models import QuestionRequest, AnswerResponse
from app.utils.orchestrator import ReviewerAgent
from src.utils.session_layer import verifier, SessionData

router = APIRouter(tags=["allianz-finance"])

@router.post("/ask", response_model=AnswerResponse, status_code=status.HTTP_200_OK)
async def ask(
    request: Request,
    input_data: QuestionRequest,
    session_info = Depends(verifier)
):
    # ⏪ Load the shared orchestrator
    agent: ReviewerAgent = request.app.state.orchestrator

    # ⏪ Load session history if available
    session_id, session_data = session_info
    previous_history = session_data.history or []

    # 🤖 Process message
    result = await agent.process_message(
        message=input_data.message,
        previous_history=previous_history
    )

    # 💾 Save updated history to session
    session_data.history = result.history
    await verifier.backend.update(session_id, session_data)

    # 📤 Return updated response
    return JSONResponse(content=result.model_dump())

import os
from typing import Optional, List
from dataclasses import dataclass
from azure.identity.aio import DefaultAzureCredential
from azure.ai.projects.aio import AIProjectClient
from semantic_kernel.agents import AzureAIAgent, AgentGroupChat
from semantic_kernel.connectors.ai.chat_completion_client_base import ChatMessage
from .strategy_setup import build_selection_strategy, build_termination_strategy
from app.utils.kernel import get_kernel
from app.models import ReviewResponse, AgentMessage

@dataclass
class ReviewerAgent:
    project_client: AIProjectClient
    agent_group: AgentGroupChat

    @classmethod
    async def create(cls) -> "ReviewerAgent":
        credential = DefaultAzureCredential()
        conn_str = os.getenv("PROJECT_CONNECTION_STRING")
        domain_id = os.getenv("DOMAIN_AGENT_ID")
        summarizer_id = os.getenv("SUMMARIZER_AGENT_ID")

        if not conn_str or not domain_id or not summarizer_id:
            raise ValueError("Missing required environment variables.")

        project_client = AIProjectClient.from_connection_string(credential=credential, conn_str=conn_str)

        domain_def = await project_client.agents.get_agent(agent_id=domain_id)
        summarizer_def = await project_client.agents.get_agent(agent_id=summarizer_id)

        domain_agent = AzureAIAgent(client=project_client, definition=domain_def, name="DomainAgent")
        summarizer_agent = AzureAIAgent(client=project_client, definition=summarizer_def, name="SummarizerAgent")

        kernel = get_kernel()

        selection = build_selection_strategy(kernel, [domain_agent, summarizer_agent])
        termination = build_termination_strategy(kernel, [summarizer_agent])

        chat = AgentGroupChat(
            agents=[domain_agent, summarizer_agent],
            selection_strategy=selection,
            termination_strategy=termination
        )

        return cls(project_client=project_client, agent_group=chat)

    async def process_message(self, message: str, previous_history: Optional[List[dict]] = None) -> ReviewResponse:
        # ✅ Load previous messages if given
        if previous_history:
            for msg in previous_history:
                self.agent_group.add_chat_message(role=msg["role"], message=msg["content"])

        # ➕ Add new user message
        await self.agent_group.add_chat_message(message=message)

        responses = []
        async for response in self.agent_group.invoke():
            responses.append(AgentMessage(agent=response.agent.name, message=response.content))

        final_message = self.agent_group.history.messages[-1].content

        # ✅ Return full history
        history = [
            {"role": m.role, "content": m.content}
            for m in self.agent_group.history.messages
        ]

        return ReviewResponse(
            message=final_message,
            status="success",
            all_responses=responses,
            history=history
        )
